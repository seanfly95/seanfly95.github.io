<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>byzjz</title>
  
  <subtitle>天道酬勤</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhujianzhou.cn/"/>
  <updated>2019-03-24T08:42:48.300Z</updated>
  <id>https://zhujianzhou.cn/</id>
  
  <author>
    <name>JZ_Zhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test</title>
    <link href="https://zhujianzhou.cn/2019/03/24/test/"/>
    <id>https://zhujianzhou.cn/2019/03/24/test/</id>
    <published>2019-03-24T08:42:48.000Z</published>
    <updated>2019-03-24T08:42:48.300Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="https://zhujianzhou.cn/2018/08/07/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>https://zhujianzhou.cn/2018/08/07/冒泡排序/</id>
    <published>2018-08-07T15:34:12.000Z</published>
    <updated>2018-08-07T15:35:23.729Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">int n;</span><br><span class="line">int buf[100];//定义将要使用的变量n，并用buf【100】 来保存将要排序的数字 </span><br><span class="line">while(scanf(&quot;%d&quot;,&amp;n)!=EOF)&#123;//输入n，并实现多组数据的输入 </span><br><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;buf[i]);</span><br><span class="line">&#125;//输入待排序数字 </span><br><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">for(int j=0;j&lt;n-1-i;j++)&#123;</span><br><span class="line">if(buf[j]&gt;buf[j+1])&#123;</span><br><span class="line">int tmp=buf[j];</span><br><span class="line">buf[j]=buf[j+1];</span><br><span class="line">buf[j+1]=tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;//冒泡排序主体 </span><br><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">printf(&quot;%d &quot;,buf[i]);</span><br><span class="line">&#125;//输出完成排序后的数字，注意格式 </span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="学习" scheme="https://zhujianzhou.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="王道" scheme="https://zhujianzhou.cn/tags/%E7%8E%8B%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>线性表结构的实现及基本操作（C语言）</title>
    <link href="https://zhujianzhou.cn/2018/07/29/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%BB%93%E6%9E%84%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/"/>
    <id>https://zhujianzhou.cn/2018/07/29/线性表结构的实现及基本操作（C语言）/</id>
    <published>2018-07-29T14:39:57.000Z</published>
    <updated>2018-07-29T14:41:27.553Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><span class="line">//线性表结构的实现及基本操作（共17种）</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">typedef int ElemType;       //定义元素类型</span><br><span class="line">struct List                //定义单链表结点类型</span><br><span class="line">&#123;</span><br><span class="line">    ElemType *list;//存储空间基址</span><br><span class="line">    int size;      //当前长度</span><br><span class="line">    int MaxSize;   //当前分配的存储容量，即存储线性表的最大长度</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//1、初始化线性表L，即进行动态存储空间分配并置L为一个空表</span><br><span class="line">void init_list(struct List *L, int ms)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;线性表正在初始化!\n&quot;);</span><br><span class="line">    if (ms &lt; 0) //检查ms是否有效</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;ms值非法！\n&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;MaxSize = ms; //置线性表初始存储容量为ms</span><br><span class="line">    L-&gt;list = (ElemType *)malloc(ms*sizeof(ElemType)); //动态存储空间分配</span><br><span class="line">    if (!L-&gt;list)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;动态存储分配失败！\n&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;size = 0; //初始置线性表为空</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//2、清除线性表L中的所有元素，释放动态存储空间，使之成为一个空表</span><br><span class="line">void clear_list(struct List *L)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;线性表释放动态存储空间!\n&quot;);</span><br><span class="line">    if (L-&gt;list != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        free(L-&gt;list);</span><br><span class="line">        L-&gt;list = 0;</span><br><span class="line">        L-&gt;size = L-&gt;MaxSize = 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//3、返回线性表L的长度，若L为空则返回0</span><br><span class="line">int size_list(struct List *L)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;正计算在线性表长度：!\n&quot;);</span><br><span class="line">    return L-&gt;size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//4、判断线性表L是否为空，若为空则返回1，否则返回0</span><br><span class="line">int empty_list(struct List *L)</span><br><span class="line">&#123;</span><br><span class="line">    if (L-&gt;size == 0)</span><br><span class="line">        return 1;</span><br><span class="line">    else</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//5、返回线性表L中第pos个元素的值，若pos超出范围，则停止程序运行</span><br><span class="line">ElemType get_elem(struct List *L, int pos)</span><br><span class="line">&#123;</span><br><span class="line">    if (pos &lt; 1 || pos &gt; L-&gt;size)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;元素序号越界！\n&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    return L-&gt;list[pos - 1];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//6、顺序扫描（即遍历）输出线性表L中的每个元素</span><br><span class="line">void traverse_list(struct List *L)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    for (i = 0; i &lt; L-&gt;size; i++)</span><br><span class="line">        printf(&quot;%d,&quot;, L-&gt;list[i]);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//7、从线性表L中查找值与x相等的元素（第一个），若查找成功则返回其位置（下标），否则返回-1</span><br><span class="line">int find_list(struct List *L, ElemType x)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    for (i = 0; i &lt; L-&gt;size; i++) //此处类型ElemType为整型，当为字符串类型（char *）时，</span><br><span class="line">        if (L-&gt;list[i] == x)      //if语句应改为: if (strcmp(L-&gt;list[i], x) == 0)</span><br><span class="line">            return i;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//8、把线性表L中第pos个元素的值修改为x的值，若修改成功返回1，否则返回0</span><br><span class="line">int update_pos_list(struct List *L, int pos, ElemType x)</span><br><span class="line">&#123;</span><br><span class="line">    if (pos &lt; 1 || pos &gt; L-&gt;size)  //若pos越界则修改失败</span><br><span class="line">        return 0;</span><br><span class="line">    L-&gt;list[pos - 1] = x;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//9、向线性表L的表头插入元素x</span><br><span class="line">//此时需要考虑到线性表存储空间已满的情况，则需要重新分配更大的动态存储空间</span><br><span class="line">void again_malloc(struct List *L)</span><br><span class="line">&#123;</span><br><span class="line">    ElemType *p = realloc(L-&gt;list, 2*L-&gt;MaxSize*sizeof(ElemType));//此处重新分配的空间为原来的2倍</span><br><span class="line">    if (!p)  //重新分配失败</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;存储空间用完！\n&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;list = p;             //使list指向新线性表空间</span><br><span class="line">    L-&gt;MaxSize = 2 * L-&gt;MaxSize;</span><br><span class="line">    printf(&quot;存储空间已扩大为当前的2倍！\n&quot;);//输出提示已扩充空间</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//10、表头插入元素</span><br><span class="line">void insert_first_list(struct List *L, ElemType x) </span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    if (L-&gt;size == L-&gt;MaxSize) //存储空间已满</span><br><span class="line">        again_malloc(L);        //重新分配更大空间</span><br><span class="line">    for (i = L-&gt;size - 1; i &gt;= 0; i--)</span><br><span class="line">        L-&gt;list[i + 1] = L-&gt;list[i];</span><br><span class="line">    L-&gt;list[0] = x;</span><br><span class="line">    L-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//11、向线性表L的表尾插入元素x</span><br><span class="line">void insert_last_list(struct List *L, ElemType x)</span><br><span class="line">&#123;</span><br><span class="line">    if (L-&gt;size == L-&gt;MaxSize)</span><br><span class="line">        again_malloc(L);</span><br><span class="line">    L-&gt;list[L-&gt;size] = x;</span><br><span class="line">    L-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//12、向线性表L中第pos个元素位置插入元素x，若插入成功返回1，否则返回0</span><br><span class="line">int insert_pos_list(struct List *L, int pos, ElemType x)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    if (pos &lt; 1 || pos &gt; L-&gt;size + 1) //pos的合法位置是第一位到最后一位的后一位之间</span><br><span class="line">        return 0;</span><br><span class="line">    if (L-&gt;size == L-&gt; MaxSize)</span><br><span class="line">        again_malloc(L);</span><br><span class="line">    for (i = L-&gt;size - 1; i &gt;= pos - 1; i--)</span><br><span class="line">        L-&gt;list[i + 1] = L-&gt;list[i];</span><br><span class="line">    L-&gt;list[pos - 1] = x;</span><br><span class="line">    L-&gt;size++;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//13、向有序（递增）线性表L中插入元素x，使得插入后仍然有序</span><br><span class="line">void insert_order_list(struct List *L, ElemType x)</span><br><span class="line">&#123;</span><br><span class="line">    int i, j;</span><br><span class="line">    if (L-&gt;size == L-&gt;MaxSize)</span><br><span class="line">        again_malloc(L);</span><br><span class="line">    for (i = 0; i &lt; L-&gt;size; i++)</span><br><span class="line">        if (x &lt; L-&gt;list[i])</span><br><span class="line">            break;   //此时i的值即为要插入的位置。若x比所有元素都大，则i自增后的值为size，下面的for循环不执行。</span><br><span class="line">    for (j = L-&gt;size - 1; j &gt;= i; j--)</span><br><span class="line">        L-&gt;list[j + 1] = L-&gt;list[j];</span><br><span class="line">    L-&gt;list[i] = x;</span><br><span class="line">    L-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//14、从线性表L中删除表头元素并返回它，若删除失败则停止程序运行</span><br><span class="line">ElemType delete_first_list(struct List *L)</span><br><span class="line">&#123;</span><br><span class="line">    ElemType temp; //临时变量，用于存储表头元素</span><br><span class="line">    int i;</span><br><span class="line">    if (L-&gt;size == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;线性表为空，不能删除！\n&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    temp = L-&gt;list[0];</span><br><span class="line">    for (i = 1; i &lt; L-&gt;size; i++)</span><br><span class="line">        L-&gt;list[i - 1] = L-&gt;list[i];</span><br><span class="line">    L-&gt;size--;</span><br><span class="line">    return temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//15、从线性表L中删除表尾元素并返回它，若删除失败则停止程序运行</span><br><span class="line">ElemType delete_last_list(struct List *L)</span><br><span class="line">&#123;</span><br><span class="line">    if (L-&gt;size == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;线性表为空，不能删除！\n&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;size--;</span><br><span class="line">    return L-&gt;list[L-&gt;size];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//16、从线性表L中删除第pos个元素并返回它，若删除失败则停止程序运行</span><br><span class="line">ElemType delete_pos_list(struct List *L, int pos)</span><br><span class="line">&#123;</span><br><span class="line">    ElemType temp;</span><br><span class="line">    int i;</span><br><span class="line">    if (pos &lt; 1 || pos &gt; L-&gt;size)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;pos值越界，不能删除！\n&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    temp = L-&gt;list[pos - 1];</span><br><span class="line">    for (i = pos; i &lt; L-&gt;size; i++)</span><br><span class="line">        L-&gt;list[i - 1] = L-&gt;list[i];</span><br><span class="line">    L-&gt;size--;</span><br><span class="line">    return temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//17、从线性表L中删除值为x的第一个元素，若删除成功返回1否则返回0</span><br><span class="line">int delete_value_list(struct List *L, ElemType x)</span><br><span class="line">&#123;</span><br><span class="line">    int i, j;</span><br><span class="line">    for (i = 0; i &lt; L-&gt;size; i++)</span><br><span class="line">        if (L-&gt;list[i] == x)</span><br><span class="line">            break; //此时的i即是要删除的位置,</span><br><span class="line">    if (i == L-&gt;size)//若找不到，上面的i自增后为size</span><br><span class="line">        return 0;</span><br><span class="line">    for (j = i + 1; j &lt; L-&gt;size; j++)</span><br><span class="line">        L-&gt;list[j - 1] = L-&gt;list[j];</span><br><span class="line">    L-&gt;size--;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//主函数</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[10] = &#123;2,4,6,8,10,12,14,16,18,20&#125;; //此处可以手动输入</span><br><span class="line">    int i;</span><br><span class="line">    struct List L;</span><br><span class="line">    init_list(&amp;L, 5);                 //初始化分配线性表空间为5</span><br><span class="line">    for (i = 0; i &lt; 10; i++)</span><br><span class="line">        insert_last_list(&amp;L, a[i]);    //将数组中的元素依次插入线性表（空间不够，扩大2倍）</span><br><span class="line">    insert_pos_list(&amp;L, 11, 48);       //在第11位插入48（空间不够，再次扩大2倍）</span><br><span class="line">    insert_pos_list(&amp;L, 1, 64);        //在第1位插入64</span><br><span class="line">    printf(&quot;%d\n&quot;, get_elem(&amp;L, 4));  //输出第4个元素</span><br><span class="line">    traverse_list(&amp;L);                //遍历输出所有元素</span><br><span class="line">    printf(&quot;%d\n&quot;, find_list(&amp;L, 10));//查找输出数值为10的元素位置（下标）</span><br><span class="line">    update_pos_list(&amp;L, 3, 20);        //把第三个元素修改为20</span><br><span class="line">    delete_first_list(&amp;L);             //删除表头元素</span><br><span class="line">    delete_first_list(&amp;L);</span><br><span class="line">    delete_last_list(&amp;L);              //删除表尾元素</span><br><span class="line">    delete_last_list(&amp;L);</span><br><span class="line">    delete_pos_list(&amp;L, 5);            //删除第5个元素</span><br><span class="line">    delete_pos_list(&amp;L, 7);            //删除第7个元素</span><br><span class="line">    printf(&quot;%d\n&quot;, size_list(&amp;L));    //输出线性表长度</span><br><span class="line">    printf(&quot;%d\n&quot;, empty_list(&amp;L));   //判断线性表是否为空</span><br><span class="line">    traverse_list(&amp;L);                //遍历输出所有元素</span><br><span class="line">    clear_list(&amp;L);                   //清空线性表，释放空间</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="学习" scheme="https://zhujianzhou.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数据结构" scheme="https://zhujianzhou.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>[解决方案]未知2136143处的非法输入序列</title>
    <link href="https://zhujianzhou.cn/2018/04/11/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E6%9C%AA%E7%9F%A52136143%E5%A4%84%E7%9A%84%E9%9D%9E%E6%B3%95%E8%BE%93%E5%85%A5%E5%BA%8F%E5%88%97/"/>
    <id>https://zhujianzhou.cn/2018/04/11/解决方案-未知2136143处的非法输入序列/</id>
    <published>2018-04-10T16:10:30.000Z</published>
    <updated>2018-04-10T16:11:13.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天学习利用hive分析搜狗实验室数据，因为8859格式在Linux上会产生乱码，所以用iconv命令进行转码，转码时候遇到这样一个错误导致转换停止，“未知2106143处的非法输入序列”，可能文件有非法字符，这里用-c-参数可以忽略掉无效字符"><a href="#今天学习利用hive分析搜狗实验室数据，因为8859格式在Linux上会产生乱码，所以用iconv命令进行转码，转码时候遇到这样一个错误导致转换停止，“未知2106143处的非法输入序列”，可能文件有非法字符，这里用-c-参数可以忽略掉无效字符" class="headerlink" title="今天学习利用hive分析搜狗实验室数据，因为8859格式在Linux上会产生乱码，所以用iconv命令进行转码，转码时候遇到这样一个错误导致转换停止，“未知2106143处的非法输入序列”，可能文件有非法字符，这里用 -c 参数可以忽略掉无效字符"></a>今天学习利用hive分析搜狗实验室数据，因为8859格式在Linux上会产生乱码，所以用iconv命令进行转码，转码时候遇到这样一个错误导致转换停止，“未知2106143处的非法输入序列”，可能文件有非法字符，这里用 -c 参数可以忽略掉无效字符</h3><h3 id="iconv-c-f-gbk-t-utf8-SogouLabDic-dic"><a href="#iconv-c-f-gbk-t-utf8-SogouLabDic-dic" class="headerlink" title="iconv -c -f gbk -t utf8 SogouLabDic.dic"></a>iconv -c -f gbk -t utf8 SogouLabDic.dic</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今天学习利用hive分析搜狗实验室数据，因为8859格式在Linux上会产生乱码，所以用iconv命令进行转码，转码时候遇到这样一个错误导致转换停止，“未知2106143处的非法输入序列”，可能文件有非法字符，这里用-c-参数可以忽略掉无效字符&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="日常" scheme="https://zhujianzhou.cn/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="Hadoop" scheme="https://zhujianzhou.cn/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>[教程]centos6.3从python2.6升级到python2.7</title>
    <link href="https://zhujianzhou.cn/2018/04/11/%E6%95%99%E7%A8%8B-centos6-3%E4%BB%8Epython2-6%E5%8D%87%E7%BA%A7%E5%88%B0python2-7/"/>
    <id>https://zhujianzhou.cn/2018/04/11/教程-centos6-3从python2-6升级到python2-7/</id>
    <published>2018-04-10T16:07:24.000Z</published>
    <updated>2018-04-10T16:09:34.798Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong> 因为centos 6.3中的python 2.6已被深度依赖，所以不能采取卸载2.6或者从2.6直接升级2.7的方法，只能另行全新安装2.7</strong><br>1.下载Pyhon，选择下载Gzipped source tar ball (2.7.8) (sig)，网址为<a href="https://www.python.org/download/releases/2.7.8" target="_blank" rel="noopener">https://www.python.org/download/releases/2.7.8</a><br>2.解压安装，命令如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf Python-2.7.8.tgz</span><br><span class="line">cd Python-2.7.8</span><br><span class="line">./configure --prefix=/usr/local/python2.7</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>3.创建链接来使系统默认python变为python2.7</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -fs /usr/local/python2.7/bin/python2.7 /usr/bin/python</span><br></pre></td></tr></table></figure><p>4.查看Python版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python –V</span><br></pre></td></tr></table></figure><p>5.修改yum配置（否则yum无法正常运行）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/bin/yum</span><br></pre></td></tr></table></figure><p>将第一行的#!/usr/bin/python修改为系统原有的python版本地址<br><code>#!/usr/bin/python2.6</code><br>至此CentOS6.3系统Python已成功升级至2.7.8版本</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;strong&gt; 因为centos 6.3中的python 2.6已被深度依赖，所以不能采取卸载2.6或者从2.6直接升级2.7的方法，只能另行全新安装2.7&lt;/strong&gt;&lt;br&gt;1.下载Pyhon，选择下载Gzipped source tar ball (
      
    
    </summary>
    
      <category term="日常" scheme="https://zhujianzhou.cn/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="linux" scheme="https://zhujianzhou.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>[解决方案]VMWare Workstation 12 Pro磁盘占用率百分之百</title>
    <link href="https://zhujianzhou.cn/2018/04/11/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-VMWare-Workstation-12-Pro%E7%A3%81%E7%9B%98%E5%8D%A0%E7%94%A8%E7%8E%87%E7%99%BE%E5%88%86%E4%B9%8B%E7%99%BE/"/>
    <id>https://zhujianzhou.cn/2018/04/11/解决方案-VMWare-Workstation-12-Pro磁盘占用率百分之百/</id>
    <published>2018-04-10T16:03:09.000Z</published>
    <updated>2018-04-10T16:05:03.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最近因为课程关系需要同时运行多个虚拟机，明明没有IO操作磁盘占用率却经常100-，经过查询以后才发现，vm9以后的虚拟机在运行时都会在硬盘上生成内存的镜像文件，这导致笔记本虚拟机经常出现读硬盘的时间多，影响虚拟机的运行速度，如果你内存够大，可以把虚拟机-设置-选项-高级里面的禁用内存页面修整选中，同时在每一个虚拟机工程文件里在-vmx中加上"><a href="#最近因为课程关系需要同时运行多个虚拟机，明明没有IO操作磁盘占用率却经常100-，经过查询以后才发现，vm9以后的虚拟机在运行时都会在硬盘上生成内存的镜像文件，这导致笔记本虚拟机经常出现读硬盘的时间多，影响虚拟机的运行速度，如果你内存够大，可以把虚拟机-设置-选项-高级里面的禁用内存页面修整选中，同时在每一个虚拟机工程文件里在-vmx中加上" class="headerlink" title="最近因为课程关系需要同时运行多个虚拟机，明明没有IO操作磁盘占用率却经常100%，经过查询以后才发现，vm9以后的虚拟机在运行时都会在硬盘上生成内存的镜像文件，这导致笔记本虚拟机经常出现读硬盘的时间多，影响虚拟机的运行速度，如果你内存够大，可以把虚拟机/设置/选项/高级里面的禁用内存页面修整选中，同时在每一个虚拟机工程文件里在***.vmx中加上"></a>最近因为课程关系需要同时运行多个虚拟机，明明没有IO操作磁盘占用率却经常100%，经过查询以后才发现，vm9以后的虚拟机在运行时都会在硬盘上生成内存的镜像文件，这导致笔记本虚拟机经常出现读硬盘的时间多，影响虚拟机的运行速度，如果你内存够大，可以把虚拟机/设置/选项/高级里面的禁用内存页面修整选中，同时在每一个虚拟机工程文件里在***.vmx中加上</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mainMem.useNamedFile = &quot;FALSE&quot;</span><br></pre></td></tr></table></figure><h2 id="或者在虚拟机的全局设置seting-ini里面加上一句"><a href="#或者在虚拟机的全局设置seting-ini里面加上一句" class="headerlink" title="或者在虚拟机的全局设置seting.ini里面加上一句"></a>或者在虚拟机的全局设置seting.ini里面加上一句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mainMem.useNamedFile = &quot;FALSE&quot;</span><br></pre></td></tr></table></figure><h2 id="这里我的虚拟机全局变量设置路径为C-ProgramData-VMware-VMware-Workstation"><a href="#这里我的虚拟机全局变量设置路径为C-ProgramData-VMware-VMware-Workstation" class="headerlink" title="这里我的虚拟机全局变量设置路径为C:\ProgramData\VMware\VMware Workstation"></a>这里我的虚拟机全局变量设置路径为C:\ProgramData\VMware\VMware Workstation</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;最近因为课程关系需要同时运行多个虚拟机，明明没有IO操作磁盘占用率却经常100-，经过查询以后才发现，vm9以后的虚拟机在运行时都会在硬盘上生成内存的镜像文件，这导致笔记本虚拟机经常出现读硬盘的时间多，影响虚拟机的运行速度，如果你内存够大，可以把虚拟机-设置-选项
      
    
    </summary>
    
      <category term="日常" scheme="https://zhujianzhou.cn/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="linux" scheme="https://zhujianzhou.cn/tags/linux/"/>
    
  </entry>
  
</feed>
